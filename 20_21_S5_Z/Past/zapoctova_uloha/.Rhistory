ylab = "frekvence")
t.test(x = data[["TemperatureIn"]], mu = 9.9)
# draw a histogram
ggplot(data = err_data) +
geom_bar(mapping = aes(x = factor(format(as.Date(time),"%m/%y")),
fill = factor(Error)), position = "dodge") +
labs(x = "měsíc", y = "počet chyb", title = "Rozdělení chyb",
fill = "druh chyby")
# draw a histogram
ggplot(data = data_10) +
geom_bar(mapping = aes(x = factor(format(as.Date(time),"%m/%y")),
fill = factor(Error)), position = "dodge") +
labs(x = "měsíc", y = "počet chyb", fill = "druh chyby",
title = "Rozdělení chyb s posunutými parametry")
err_sup_dist <- ggplot(data = data_10) +
geom_bar(mapping = aes(x = as.character(supply), fill = factor(Error)),
position = "dodge")
err_sup_dist + labs(fill = "druh chyby", x = "napájení", y = "počet")
library(tidyverse)
library(lubridate)
# load tableau definitions
tabs <- read.csv("panely.csv", TRUE, sep = "\t")
# match tabs from Prague & Pribram
prg_mask <- grepl("rop", tabs[["table_id"]])
pbr_mask <- grepl("pbr", tabs[["table_id"]])
# determine tab location from table_id
loc <- vector(mode = "character", length = length(tabs[["table_id"]]))
for (i in 1:length(prg_mask)) {
if (prg_mask[i] == T) {
loc[i] <- "Praha"
}
if (pbr_mask[i] == T) {
loc[i] <- "Pribram"
}
}
# add column, filter Kolin and testing tabs
tabs$location=loc
tabs <- subset(tabs, location != "")
tabs <- subset(tabs, supply > 0)
all_count <- length(tabs$table_id)
sol_count <- length(filter(tabs, supply == 3)$table_id)
nig_count <- length(filter(tabs, supply == 2)$table_id)
# Celkový počet sloupků
all_count
# Počet sloupků se solárním napájením
sol_count
# Počet sloupků s nočním napájením
nig_count
pl_dist <- ggplot(data = tabs) + geom_bar(mapping = aes(x = location, fill = factor(supply)), position = "dodge")
pl_dist + labs(title = "Rozdělení CHLCD tabel", fill = "napájení",
x = "město", y = "počet")+
scale_y_discrete(limits = factor(1:10))
# Supply = 1 ... trvalé napájení
# Supply = 2 ... noční napájení
# Supply = 3 ... solární napájení
# load data
data <- read.csv("data.csv", TRUE, sep = "\t")
tabs <- subset(tabs, supply > 1)
data_count <- length(data$table_id)
err_count <- 0
# filter data only to contain logs from tabs with alternative supply
data <- data[data$table_id %in% tabs[["table_id"]],]
error <- vector(mode = "numeric")
err_data <- data %>%
filter(TemperatureIn > min(tabs$max_temperature) |
Power < max(tabs$min_power))
for (d in 1:nrow(err_data)) {
e <- 0
id <- err_data[d, "table_id"]
temp <- err_data[d, "TemperatureIn"]
volt <- err_data[d, "Power"]
param <- subset(tabs, table_id == id)
# check for temperature error
if (temp + param["delta_t"] > param["max_temperature"]) {
e <- 1
}
# check for voltage error
if (volt + param["delta_v"] < param["min_power"]) {
if (e > 0) {
e <- 3
}
else {
e <- 2
}
}
error <- append(error, e)
}
# add error column and forget errorless entries
err_data$Error <- error
err_data <- filter(err_data, err_data$Error > 0)
err_count <- length(err_data$table_id)
# draw a histogram
ggplot(data = err_data) +
geom_bar(mapping = aes(x = factor(format(as.Date(time),"%m/%y")),
fill = factor(Error)), position = "dodge") +
labs(x = "měsíc", y = "počet chyb", title = "Rozdělení chyb",
fill = "druh chyby")
# chyba = 2 ... příliš nízké napětí
# Celkový počet záznamů
data_count
# Celkový počet chyb
err_count
# Počet chyb vyjádřený vůči počtu záznamů
err_count/data_count
# load tableau definitions
tabs_10 <- read.csv("panely_10%.csv", TRUE, sep = "\t")
# determine tab location from table_id
loc <- vector(mode = "character", length = length(tabs_10$table_id))
for (i in 1:length(prg_mask)) {
if (prg_mask[i] == T) {
loc[i] <- "Praha"
}
if (pbr_mask[i] == T) {
loc[i] <- "Pribram"
}
}
# add column, filter Kolin and testing tabs
tabs_10$location=loc
tabs_10 <- subset(tabs_10, location != "")
tabs_10 <- subset(tabs_10, supply > 1)
err_count <- 0
error <- vector(mode = "numeric")
data_10 <- data %>%
filter(TemperatureIn > min(tabs_10$max_temperature) |
Power < max(tabs_10$min_power))
for (d in 1:nrow(data_10)) {
e <- 0
id <- data_10[d, "table_id"]
temp <- data_10[d, "TemperatureIn"]
volt <- data_10[d, "Power"]
param <- subset(tabs_10, table_id == id)
# check for temperature error
if (temp + param["delta_t"] > param["max_temperature"]) {
e <- 1
}
# check for voltage error
if (volt + param["delta_v"] < param["min_power"]) {
if (e > 0) {
e <- 3
}
else {
e <- 2
}
}
error <- append(error, e)
}
# add error column and forget errorless entries
data_10$Error <- error
data_10 <- filter(data_10, data_10$Error > 0)
err_count <- length(data_10$table_id)
# draw a histogram
ggplot(data = data_10) +
geom_bar(mapping = aes(x = factor(format(as.Date(time),"%m/%y")),
fill = factor(Error)), position = "dodge") +
labs(x = "měsíc", y = "počet chyb", fill = "druh chyby",
title = "Rozdělení chyb s posunutými parametry")
# chyba = 1 ... příliš vysoká teplota
# chyba = 2 ... příliš nízké napětí
# Celkový počet chyb
err_count
# Podíl chyb
err_count/data_count
# group all errors in one day, so the histogram will work as intended
data_10$hm <- as.POSIXct(paste0("2020-01-01 ",
(str_extract(data_10$time, "..:..:.."))))
# draw the histogram
hist(x = data_10$hm,
breaks = "hours",
freq = T,
main = "Rozdělení chyb vzhledem k času",
xlab = "čas",
ylab = "počet chyb za poslední hodinu")
hours <- sprintf("2020-1-1 %d:00", seq(0,24))
halfs <- sprintf("2020-1-1 %d:30", seq(0,23))
lims <- c()
time <- c()
for (i in 1:24) {
lims <- append(lims, hours[i])
lims <- append(lims, halfs[i])
}
time <- lims
lims <-append(lims, hours[25])
errors <- c(1:48)
for (i in 1:48) {
from <- as.POSIXct(lims[i])
to <- as.POSIXct(lims[i+1])
errors[i] <- length(filter(data_10, hm >= from & hm <= to)$table_id)
}
for (i in 1:48) {
time[i] <- hour(time[i]) + minute(time[i]) / 60
}
time_num <- as.numeric(time)
relation <- lm(errors~time_num)
summary(relation)
plot(x = time_num, y = errors, col = "blue", abline(relation, col = "red"),
main = "Lineární regrese",
xlab = "čas",
ylab = "počet chyb za posledních 30 min")
plot(time_num, 23*sin(0.25*time_num+26)+40, type = "l", col = "red",
ylim = range(10:80),
main = "Můj pokus o aproximaci pomocí sinu",
xlab = "čas",
ylab = "počet chyb za posledních 30 min")
points(time_num, errors, col = "blue")
location <- c()
supply <- c()
for (i in 1:length(data_10$table_id)) {
id <- data_10$table_id[i]
param <- subset(tabs_10, table_id == id)
location <- append(location, param$location)
supply <- append(supply, param$supply)
}
data_10$location <- location
data_10$supply <- supply
err_sup_dist <- ggplot(data = data_10) +
geom_bar(mapping = aes(x = as.character(supply), fill = factor(Error)),
position = "dodge")
err_sup_dist + labs(fill = "druh chyby", x = "napájení", y = "počet")
# chyba = 1 ... příliš vysoká teplota
# chyba = 2 ... příliš nízké napětí
err_loc_err_dist <- ggplot(data = data_10) +
geom_bar(mapping = aes(x = location, fill = factor(Error)),
position = "dodge")
err_loc_sup_dist <- ggplot(data = data_10) +
geom_bar(mapping = aes(x = location, fill = factor(supply)),
position = "dodge")
par(mfrow = c(1,2))
err_loc_err_dist + labs(title = "Rozdělení chyb do měst podle druhu chyby",
fill = "druh chyby", x = "město", y = "počet chyb")
# chyba = 1 ... vysoká teplota
# chyba = 2 ... nízké napětí
err_loc_sup_dist + labs(title = "Rozdělení chyb do měst podle napájení porouchaného sloupku",
fill = "napájení", x = "město", y = "počet chyb")
# napájení = 2 ... noční proud
# napájení = 3 ... solární
hist(data[["TemperatureIn"]], breaks = 100,
main = "Histogram naměřených teplot",
xlab = "teploty",
ylab = "frekvence")
t.test(x = data[["TemperatureIn"]], mu = 9.9)
par(mfrow = c(1,2))
err_loc_err_dist + labs(title = "Rozdělení chyb do měst podle druhu chyby",
fill = "druh chyby", x = "město", y = "počet chyb")
# chyba = 1 ... vysoká teplota
# chyba = 2 ... nízké napětí
err_loc_sup_dist + labs(title = "Rozdělení chyb do měst podle napájení porouchaného sloupku",
fill = "napájení", x = "město", y = "počet chyb")
# napájení = 2 ... noční proud
# napájení = 3 ... solární
hours <- sprintf("2020-1-1 %d:00", seq(0,24))
halfs <- sprintf("2020-1-1 %d:30", seq(0,23))
lims <- c()
time <- c()
for (i in 1:24) {
lims <- append(lims, hours[i])
lims <- append(lims, halfs[i])
}
time <- lims
lims <-append(lims, hours[25])
errors <- c(1:48)
for (i in 1:48) {
from <- as.POSIXct(lims[i])
to <- as.POSIXct(lims[i+1])
errors[i] <- length(filter(data_10, hm >= from & hm <= to)$table_id)
}
library(tidyverse)
library(lubridate)
# load tableau definitions
tabs <- read.csv("panely.csv", TRUE, sep = "\t")
# match tabs from Prague & Pribram
prg_mask <- grepl("rop", tabs[["table_id"]])
pbr_mask <- grepl("pbr", tabs[["table_id"]])
# determine tab location from table_id
loc <- vector(mode = "character", length = length(tabs[["table_id"]]))
for (i in 1:length(prg_mask)) {
if (prg_mask[i] == T) {
loc[i] <- "Praha"
}
if (pbr_mask[i] == T) {
loc[i] <- "Pribram"
}
}
# add column, filter Kolin and testing tabs
tabs$location=loc
tabs <- subset(tabs, location != "")
tabs <- subset(tabs, supply > 0)
all_count <- length(tabs$table_id)
sol_count <- length(filter(tabs, supply == 3)$table_id)
nig_count <- length(filter(tabs, supply == 2)$table_id)
# Celkový počet sloupků
all_count
# Počet sloupků se solárním napájením
sol_count
# Počet sloupků s nočním napájením
nig_count
pl_dist <- ggplot(data = tabs) + geom_bar(mapping = aes(x = location, fill = factor(supply)), position = "dodge")
pl_dist + labs(title = "Rozdělení CHLCD tabel", fill = "napájení",
x = "město", y = "počet")+
scale_y_discrete(limits = factor(1:10))
# Supply = 1 ... trvalé napájení
# Supply = 2 ... noční napájení
# Supply = 3 ... solární napájení
# load data
data <- read.csv("data.csv", TRUE, sep = "\t")
tabs <- subset(tabs, supply > 1)
data_count <- length(data$table_id)
err_count <- 0
# filter data only to contain logs from tabs with alternative supply
data <- data[data$table_id %in% tabs[["table_id"]],]
error <- vector(mode = "numeric")
err_data <- data %>%
filter(TemperatureIn > min(tabs$max_temperature) |
Power < max(tabs$min_power))
for (d in 1:nrow(err_data)) {
e <- 0
id <- err_data[d, "table_id"]
temp <- err_data[d, "TemperatureIn"]
volt <- err_data[d, "Power"]
param <- subset(tabs, table_id == id)
# check for temperature error
if (temp + param["delta_t"] > param["max_temperature"]) {
e <- 1
}
# check for voltage error
if (volt + param["delta_v"] < param["min_power"]) {
if (e > 0) {
e <- 3
}
else {
e <- 2
}
}
error <- append(error, e)
}
# add error column and forget errorless entries
err_data$Error <- error
err_data <- filter(err_data, err_data$Error > 0)
err_count <- length(err_data$table_id)
# draw a histogram
ggplot(data = err_data) +
geom_bar(mapping = aes(x = factor(format(as.Date(time),"%m/%y")),
fill = factor(Error)), position = "dodge") +
labs(x = "měsíc", y = "počet chyb", title = "Rozdělení chyb",
fill = "druh chyby")
# chyba = 2 ... příliš nízké napětí
# Celkový počet záznamů
data_count
# Celkový počet chyb
err_count
# Počet chyb vyjádřený vůči počtu záznamů
err_count/data_count
# load tableau definitions
tabs_10 <- read.csv("panely_10%.csv", TRUE, sep = "\t")
# determine tab location from table_id
loc <- vector(mode = "character", length = length(tabs_10$table_id))
for (i in 1:length(prg_mask)) {
if (prg_mask[i] == T) {
loc[i] <- "Praha"
}
if (pbr_mask[i] == T) {
loc[i] <- "Pribram"
}
}
# add column, filter Kolin and testing tabs
tabs_10$location=loc
tabs_10 <- subset(tabs_10, location != "")
tabs_10 <- subset(tabs_10, supply > 1)
err_count <- 0
error <- vector(mode = "numeric")
data_10 <- data %>%
filter(TemperatureIn > min(tabs_10$max_temperature) |
Power < max(tabs_10$min_power))
for (d in 1:nrow(data_10)) {
e <- 0
id <- data_10[d, "table_id"]
temp <- data_10[d, "TemperatureIn"]
volt <- data_10[d, "Power"]
param <- subset(tabs_10, table_id == id)
# check for temperature error
if (temp + param["delta_t"] > param["max_temperature"]) {
e <- 1
}
# check for voltage error
if (volt + param["delta_v"] < param["min_power"]) {
if (e > 0) {
e <- 3
}
else {
e <- 2
}
}
error <- append(error, e)
}
# add error column and forget errorless entries
data_10$Error <- error
data_10 <- filter(data_10, data_10$Error > 0)
err_count <- length(data_10$table_id)
# draw a histogram
ggplot(data = data_10) +
geom_bar(mapping = aes(x = factor(format(as.Date(time),"%m/%y")),
fill = factor(Error)), position = "dodge") +
labs(x = "měsíc", y = "počet chyb", fill = "druh chyby",
title = "Rozdělení chyb s posunutými parametry")
# chyba = 1 ... příliš vysoká teplota
# chyba = 2 ... příliš nízké napětí
# Celkový počet chyb
err_count
# Podíl chyb
err_count/data_count
# group all errors in one day, so the histogram will work as intended
data_10$hm <- as.POSIXct(paste0("2020-01-01 ",
(str_extract(data_10$time, "..:..:.."))))
# draw the histogram
hist(x = data_10$hm,
breaks = "hours",
freq = T,
main = "Rozdělení chyb vzhledem k času",
xlab = "čas",
ylab = "počet chyb za poslední hodinu")
hours <- sprintf("2020-1-1 %d:00", seq(0,24))
halfs <- sprintf("2020-1-1 %d:30", seq(0,23))
lims <- c()
time <- c()
for (i in 1:24) {
lims <- append(lims, hours[i])
lims <- append(lims, halfs[i])
}
time <- lims
lims <-append(lims, hours[25])
errors <- c(1:48)
for (i in 1:48) {
from <- as.POSIXct(lims[i])
to <- as.POSIXct(lims[i+1])
errors[i] <- length(filter(data_10, hm >= from & hm <= to)$table_id)
}
for (i in 1:48) {
time[i] <- hour(time[i]) + minute(time[i]) / 60
}
time_num <- as.numeric(time)
relation <- lm(errors~time_num)
summary(relation)
plot(x = time_num, y = errors, col = "blue", abline(relation, col = "red"),
main = "Lineární regrese",
xlab = "čas",
ylab = "počet chyb za posledních 30 min",
scale_x_discrete(limits=c("10", "15", "20", "0", "5")))
ggplot(mapping = aes(x = time_num, y = errors, col="blue"))
ggplot(mapping = aes(x = time_num, y = errors, col="blue")) +
geom_point()
ggplot(mapping = aes(x = time_num, y = errors, col="blue")) +
geom_point() + scale_x_discrete(limits=c("10", "15", "20", "0", "5"))
summary(lm(c(1,2,3,4,5,6,7,8,9,10)~c(1,2,3,4,5,6,7,8,9,10)))
r <- lm(c(1,2,3,4,5,6,7,8,9,10)~c(1,2,3,4,5,6,7,8,9,10))
summary(r)
a <- c(1,2,3,4,5,6,7,8,9,10)
b <- c(2,4,6,8,10,12,14,16,18,21)
plot(a,b)
lm(b~a)
summary(lm(b~a))
plot(x = time_num, y = errors, col = "blue", abline(relation, col = "red"),
main = "Lineární regrese",
xlab = "čas",
ylab = "počet chyb za posledních 30 min")
plot(x = time_num, y = errors, col = "blue", abline(relation, col = "red"),
main = "Lineární regrese",
xlab = "čas",
ylab = "počet chyb za posledních 30 min")
norm <- read.csv(normal_42_13.csv)
setwd("C:/Users/sebik/MFF/poznamky/20_21_S5_Z/Past/rozdeleni_kata")
norm <- read.csv(normal_42_13.csv)
norm <- read.csv("normal_42_13.csv")
norm_42_13 <- read.csv("normal_42_13.csv")
norm_std <- read.csv("normal.csv")
expo <- read.csv("exponential.csv")
norm_42_13 <- read.csv("normal_42_13.csv")
norm_std <- read.csv("normal.csv")
expo <- read.csv("exponential.csv")
plot(norm_std)
plot(norm_42_13)
plot(expo)
View(norm)
spread <- runif(999, min=0, max = 100)
norm_42_13 <- read.csv("normal_42_13.csv")
norm_std <- read.csv("normal.csv")
expo <- read.csv("exponential.csv")
spread <- runif(999, min=0, max = 100)
norm_42_13$spread <- spread
norm_std$spread <- spread
expo$spread <- spread
plot(norm_std)
plot(norm_42_13)
plot(expo)
norm_42_13 <- read.csv("normal_42_13.csv")
norm_std <- read.csv("normal.csv")
expo <- read.csv("exponential.csv")
spread <- runif(999, min=0, max = 50)
norm_42_13$spread <- spread
norm_std$spread <- spread
expo$spread <- spread
plot(norm_std)
plot(norm_42_13)
plot(expo)
norm_42_13 <- read.csv("normal_42_13.csv")
norm_std <- read.csv("normal.csv")
expo <- read.csv("exponential.csv")
spread <- runif(999, min=0, max = 10)
norm_42_13$spread <- spread
norm_std$spread <- spread
expo$spread <- spread
plot(norm_std)
plot(norm_42_13)
plot(expo)
